s2
________________________________________
q1.
a)
import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return np.log10(x)

x_values = np.linspace(0.1, 10, 1000)

y_values = f(x_values)

plt.plot(x_values, y_values, label="$f(x) = \log_{10}(x)$")

plt.xlabel("x")
plt.ylabel("$f(x)$")
plt.title("Graph of $f(x) = \log_{10}(x)$")

plt.xlim(0, 10)

plt.grid(True)
plt.legend()
plt.show()
______________________________________________________
b)
from matplotlib.pyplot import*
x=['Math ','Science','English','Marathi','Hindi']
y=[68,90,70,95,90]
bar(x,y,width=0.5,color='Brown')
xlabel('Subject')
ylabel('Percentage of passing')
title('Bar graph')
show()
=============================================================

Q2)

A)
from sympy import Point, Line, Eq, solve

A = Point(0, 2)
B = Point(5, 2)
C = Point(3, 0)

collinear_check = Point.is_collinear(A, B, C)

if collinear_check:
    print("The points A, B, and C are collinear.")
else:
    print("The points A, B, and C are not collinear.")

line_AB = Line(A, B)

point_to_check = Point(3, 4)

distance_eq = Eq(line_AB.distance(point_to_check), 0)
distance = solve(distance_eq)[0]

print(f"The distance from point {point_to_check} to the line AB is: {distance}")
_____________________________________________________________________________________
C)
from sympy import*
A,B,C=Point(2,2),Point(4,2),Point(3,6)
w=Triangle(A,B,C)
print("Triangle : ") 
print("Area of Triangle : ",w.area)
print("Perimeter of Triangle : ",w.perimeter)
print(" Triangle is isoceles (if==true) : ",w.is_isosceles())
print(" Triangle is equilateral (if==true) : ",w.is_equilateral())

========================================================================
Q3
A)from pulp import*
pro=LpProblem("LPP",LpMaximize)
x=LpVariable("x",lowBound=0)
y=LpVariable("y",lowBound=0)
pro+=(5*x+3*y)
pro+=(x+y<=7)
pro+=(2*x+5*y<=1)
print(pro)
from scipy.optimize import linprog
c=[-5,-3]
A=[[1,1],[2,5]]
b=[7,1]
x=(0,None)
y=(0,None)
res=linprog(c,A_ub=A,b_ub=b,bounds=(x,y),method='simplex')
print("Result: ",res)
________________________________________________________________________________
b)from pulp import LpMaximize, LpProblem, LpVariable

# Create a linear programming problem
lp_problem = LpProblem(name="LPP", sense=LpMaximize)

# Define decision variables
x = LpVariable(name="x", lowBound=0)
y = LpVariable(name="y", lowBound=0)
z = LpVariable(name="z", lowBound=0)

# Define the objective function
lp_problem += 3 * x + 2 * y + 5 * z, "Z"

# Define the constraints
lp_problem += x + 2 * y + z <= 430, "constraint1"
lp_problem += 3 * x + 2 * z <= 460, "constraint2"
lp_problem += x + 4 * y <= 120, "constraint3"

# Solve the problem using the simplex method
lp_problem.solve()

# Display the results
print(f"Status: {lp_problem.status}")
print(f"Optimal value for Z: {lp_problem.objective.value()}")
print(f"Optimal values for x, y, and z: {x.value()}, {y.value()}, {z.value()}")

========================================================================================
q4
A)
import numpy as np
import matplotlib.pyplot as plt

def plot_point(point, label):
    plt.scatter(*point, label=label)

def plot_line(start, end, label):
    plt.plot([start[0], end[0]], [start[1], end[1]], label=label)

def apply_transformation(matrix, point, label):
    transformed_point = np.dot(matrix, np.array(point + [1]))[:2]
    plot_point(transformed_point, label)

# Original point
P = np.array([4, -2])

# Initialize the plot
plt.figure(figsize=(8, 8))
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)

# Plot the original point
plot_point(P, label="Original Point")

# 1. Reflection through Y-axis
reflection_matrix_y = np.array([[-1, 0], [0, 1]])
apply_transformation(reflection_matrix_y, P, label="Reflection through Y-axis")

# 2. Scaling in X-coordinate by factor 3
scaling_matrix_x = np.array([[3, 0], [0, 1]])
apply_transformation(scaling_matrix_x, P, label="Scaling in X-coordinate by 3")

# 3. Scaling in Y-coordinate by factor 2.5
scaling_matrix_y = np.array([[1, 0], [0, 2.5]])
apply_transformation(scaling_matrix_y, P, label="Scaling in Y-coordinate by 2.5")

# 4. Reflection through the line y = -x
reflection_matrix_line = np.array([[0, -1], [-1, 0]])
apply_transformation(reflection_matrix_line, P, label="Reflection through y=-x")

# Set axis limits
plt.xlim(-15, 15)
plt.ylim(-15, 15)

# Add legend
plt.legend()

# Show the plot
plt.grid(True)
plt.show()
============================================================================================
