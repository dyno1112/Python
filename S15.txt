q1a

def calculate_triangle_area(x1, y1, x2, y2, x3, y3):
    area = 0.5 * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))
    return area
Ax, Ay = 0, 0
Bx, By = 5, 0
Cx, Cy = 3, 3
triangle_area = calculate_triangle_area(Ax, Ay, Bx, By, Cx, Cy)
print(f"The area of the triangle ABC is: {triangle_area}")

q1c

import numpy as np
import matplotlib.pyplot as plt
x_values = np.linspace(0, 5, 100)  # 100 points between 0 and 5
y_sin = np.sin(x_values)
y_cos = np.cos(x_values)
y_exp = np.exp(x_values)
y_squared = x_values**2
plt.subplot(2, 2, 1)
plt.plot(x_values, y_sin)
plt.title('sin(x)')
plt.subplot(2, 2, 2)
plt.plot(x_values, y_cos)
plt.title('cos(x)')
plt.subplot(2, 2, 3)
plt.plot(x_values, y_exp)
plt.title('e^x')
plt.subplot(2, 2, 4)
plt.plot(x_values, y_squared)
plt.title('x^2')
plt.tight_layout()
plt.show()


q2a

import matplotlib.pyplot as plt
A = [1, 2]
B = [2, -2]
C = [-1, 2]
def rotate_180_degrees(x, y):
    x_rotated = -x
    y_rotated = -y
    return x_rotated, y_rotated
A_rotated = rotate_180_degrees(*A)
B_rotated = rotate_180_degrees(*B)
C_rotated = rotate_180_degrees(*C)
plt.plot([A[0], B[0], C[0], A[0]], [A[1], B[1], C[1], A[1]], label='Original Triangle', color='blue')
plt.plot([A_rotated[0], B_rotated[0], C_rotated[0], A_rotated[0]],
         [A_rotated[1], B_rotated[1], C_rotated[1], A_rotated[1]],
         label='Rotated Triangle', linestyle='dashed', color='red')
plt.xlim(-3, 3)
plt.ylim(-3, 3)
plt.title('Rotation of Triangle ABC by 180 Degrees')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend()
plt.grid(True)
plt.show()


q2b

import numpy as np
import matplotlib.pyplot as plt
x_values = np.linspace(-10, 10, 100)
y_values = np.exp(x_values)
plt.plot(x_values, y_values, label='f(x) = e^x')
plt.title('Graph of f(x) = e^x')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.grid(True)
plt.show()


q3a

from pulp import*
pro=LpProblem("LPP",LpMinimize)
x=LpVariable("x",lowBound=0)
y=LpVariable("y",lowBound=0)
pro+=(3.5*x+2*y)
pro+=(x+y>=5)
pro+=(x>=4)
pro+=(y<=2)
print(pro)
st=pro.solve()
print("Status : ",LpStatus[st])
if(st==1):
    print("OPtimal value : ",pro.objective.value())
    print("X=",x.value())
    print("y=",y.value())
else:
    print("Optimal solution does not exist")

q4a

import numpy as np
import matplotlib.pyplot as plt
A = np.array([5, 3])
B = np.array([1, 4])
def rotate_point(x, y, angle):
    x_rotated = x * np.cos(angle) - y * np.sin(angle)
    y_rotated = x * np.sin(angle) + y * np.cos(angle)
    return x_rotated, y_rotated
def scale_point_x(x, y, scale_factor):
    x_scaled = x * scale_factor
    y_scaled = y
    return x_scaled, y_scaled
def reflect_point_through_line(x, y):
    x_reflected = -y
    y_reflected = -x
    return x_reflected, y_reflected
A_rotated = rotate_point(*A, np.pi/2)
B_rotated = rotate_point(*B, np.pi/2)
A_scaled = scale_point_x(*A_rotated, 5)
B_scaled = scale_point_x(*B_rotated, 5)
A_reflected = reflect_point_through_line(*A_scaled)
B_reflected = reflect_point_through_line(*B_scaled)
plt.plot([A[0], B[0]], [A[1], B[1]], label='Original Line Segment', color='blue')
plt.plot([A_rotated[0], B_rotated[0]], [A_rotated[1], B_rotated[1]], label='Rotated', color='green')
plt.plot([A_scaled[0], B_scaled[0]], [A_scaled[1], B_scaled[1]], label='Scaled', color='orange')
plt.plot([A_reflected[0], B_reflected[0]], [A_reflected[1], B_reflected[1]], label='Reflected', color='red')
plt.xlim(-10, 10)
plt.ylim(-10, 10)
plt.title('Combined Transformation of Line Segment')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend()
plt.grid(True)
plt.show()
