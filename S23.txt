q1a

import numpy as np
import matplotlib.pyplot as plt

# Generate x values from 0 to Ï€
x = np.linspace(0, np.pi, 100)

# Calculate sin(x) and cos(x) values
y_sin = np.sin(x)
y_cos = np.cos(x)

# Create a figure with 2x1 subplots
plt.figure(figsize=(8, 6))

# Plot sin(x) in the first subplot
plt.subplot(2, 1, 1)
plt.plot(x, y_sin, label='sin(x)', color='blue')
plt.title('Graph of sin(x)')
plt.xlabel('x')
plt.ylabel('sin(x)')
plt.legend()

# Plot cos(x) in the second subplot
plt.subplot(2, 1, 2)
plt.plot(x, y_cos, label='cos(x)', color='green')
plt.title('Graph of cos(x)')
plt.xlabel('x')
plt.ylabel('cos(x)')
plt.legend()

# Adjust layout to prevent subplots from overlapping
plt.tight_layout()

# Show the plots
plt.show()


q1c

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Define the function z = cos(|x| + |y|)
def func(x, y):
    return np.cos(np.abs(x) + np.abs(y))

# Generate x and y values
x = np.linspace(-1, 1, 100)
y = np.linspace(-1, 1, 100)

# Create a meshgrid from x and y
X, Y = np.meshgrid(x, y)

# Calculate z values using the function
Z = func(X, Y)

# Create a 3D surface plot
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')

# Set labels and title
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('3D Surface Plot of z = cos(|x| + |y|)')

# Show the plot
plt.show()



q2a

import numpy as np
import matplotlib.pyplot as plt

def draw_regular_polygon(num_sides, radius):
    # Calculate the angles for each vertex
    angles = np.linspace(0, 2*np.pi, num_sides, endpoint=False)
    
    # Calculate the coordinates of the vertices
    x = radius * np.cos(angles)
    y = radius * np.sin(angles)
    
    # Close the polygon by repeating the first vertex at the end
    x = np.append(x, x[0])
    y = np.append(y, y[0])

    # Plot the polygon
    plt.plot(x, y, marker='o')
    plt.axis('equal')  # Equal scaling for x and y axes
    plt.title(f'Regular Polygon with {num_sides} Sides and Radius {radius}')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.grid(True)
    plt.show()

# Draw a regular polygon with 20 sides and radius 1
draw_regular_polygon(20, 1)


q2b


import numpy as np
import matplotlib.pyplot as plt

def draw_polygon(vertices):
    # Extract x and y coordinates from the vertices
    x, y = zip(*vertices)

    # Close the polygon by repeating the first vertex at the end
    x = np.append(x, x[0])
    y = np.append(y, y[0])

    # Plot the polygon
    plt.plot(x, y, marker='o')
    plt.fill(x, y, alpha=0.3)  # Fill the polygon
    plt.axis('equal')  # Equal scaling for x and y axes
    plt.title('Polygon')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.grid(True)
    plt.show()

def calculate_polygon_area(vertices):
    # Apply the Shoelace formula to calculate the area of the polygon
    n = len(vertices)
    area = 0
    for i in range(n - 1):
        area += vertices[i][0] * vertices[i + 1][1] - vertices[i + 1][0] * vertices[i][1]
    area += vertices[n - 1][0] * vertices[0][1] - vertices[0][0] * vertices[n - 1][1]
    area = 0.5 * np.abs(area)
    return area

# Define the vertices of the polygon
polygon_vertices = [(0, 0), (1, 0), (2, 2), (1, 4)]

# Draw the polygon
draw_polygon(polygon_vertices)

# Calculate and print the area of the polygon
polygon_area = calculate_polygon_area(polygon_vertices)
print(f'Area of the polygon: {polygon_area}')


q31


from pulp import*
pro=LpProblem("LPP",LpMaximize)
x=LpVariable("x",lowBound=0)
y=LpVariable("y",lowBound=0)
z=LpVariable("z",lowBound=0)
pro+=(3*x+5*y+4*z)
pro+=(2*x+3*y<=8)
pro+=(2*y+5*z<=10)
pro+=(3*x+2*y+4*z<=15)
print(pro)
from scipy.optimize import linprog
c=[-3,-5,-4]
A=[[2,3,0],[0,2,5],[3,2,4]]
b=[8,10,15]
x=(0,None)
y=(0,None)
z=(0,None)
res=linprog(c,A_ub=A,b_ub=b,bounds=(x,y,z),method='simplex')
print("Result: ",res)


q4a

import numpy as np
import matplotlib.pyplot as plt

def plot_point(P, label):
    plt.scatter(P[0], P[1], label=label)
    plt.text(P[0], P[1], f' {label}', fontsize=8, ha='right')

def apply_transformation(matrix, P, label):
    transformed_point = np.dot(matrix, P)
    plot_point(transformed_point, label)

# Original point
P = np.array([3, -1])

# Create a figure
plt.figure(figsize=(8, 8))

# Plot the original point
plot_point(P, 'Original')

# I. Reflection through X axis.
reflection_matrix = np.array([[1, 0], [0, -1]])
apply_transformation(reflection_matrix, P, 'Reflection (X-axis)')

# II. Rotation about origin by an angle 30 degrees.
theta = np.radians(30)
rotation_matrix = np.array([[np.cos(theta), -np.sin(theta)], [np.sin(theta), np.cos(theta)]])
apply_transformation(rotation_matrix, P, 'Rotation (30 degrees)')

# III. Scaling in Y coordinate by factor 8.
scaling_matrix = np.array([[1, 0], [0, 8]])
apply_transformation(scaling_matrix, P, 'Scaling (Y by 8)')

# IV. Shearing in X direction by 2 units.
shearing_matrix = np.array([[1, 2], [0, 1]])
apply_transformation(shearing_matrix, P, 'Shearing (X by 2)')

# Set axis limits and labels
plt.xlim(-10, 10)
plt.ylim(-10, 10)
plt.axhline(0, color='black',linewidth=0.5)
plt.axvline(0, color='black',linewidth=0.5)
plt.grid(color = 'gray', linestyle = '--', linewidth = 0.5)

# Add legend
plt.legend()

# Show the plots
plt.show()

