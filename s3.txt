S3
=======================================
q1.
A)
import numpy as np
import matplotlib.pyplot as plt
x_values = np.linspace(0, 2 * np.pi, 1000)
y_values = np.cos(x_values)
plt.plot(x_values, y_values, label="$f(x) = \cos(x)$")
plt.xlabel("x")
plt.ylabel("$f(x)$")
plt.title("Graph of $f(x) = \cos(x)$")
plt.xticks(np.arange(0, 2.1 * np.pi, np.pi / 2), ['0', '$\\frac{\pi}{2}$', '$\pi$', '$\\frac{3\pi}{2}$', '$2\pi$'])
plt.grid(True)
plt.legend()
plt.show()
--------------------------------------------------------
B)
from matplotlib.pyplot import*
x=['cricket','football','hockey','chess','tennis']
y=[165,70,54,30,12]
bar(x,y,width=0.8,color='magenta')
xlabel('Game')
ylabel('No of students')
title('Bar graph')
show()
________________________________________________________

Q2
A)
import numpy as np
import matplotlib.pyplot as plt

def reflect_line_segment(point1, point2, reflection_line):
    m = (point2[1] - point1[1]) / (point2[0] - point1[0])
    b = point1[1] - m * point1[0]
    reflection_slope = -1  # Perpendicular slopes
    reflection_intercept = reflection_line[1] - reflection_slope * reflection_line[0]
    x_intersect = (reflection_intercept - b) / (m - reflection_slope)
    y_intersect = m * x_intersect + b
    x_reflected = 2 * x_intersect - point1[0]
    y_reflected = 2 * y_intersect - point1[1]

    return x_reflected, y_reflected

A = np.array([5, 3])
B = np.array([1, 4])

reflection_line = np.array([1, 1])

reflected_A = reflect_line_segment(A, B, reflection_line)
reflected_B = reflect_line_segment(B, A, reflection_line)

plt.figure(figsize=(8, 8))
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)

plt.plot([A[0], B[0]], [A[1], B[1]], label="Original Line Segment", marker='o')

x_values = np.linspace(min(A[0], B[0]), max(A[0], B[0]), 100)
y_values = x_values + 1
plt.plot(x_values, y_values, label="Line of Reflection", linestyle='--')

plt.plot([A[0], reflected_A[0]], [A[1], reflected_A[1]], label="Reflected Line Segment", linestyle='--', marker='o')
plt.plot([B[0], reflected_B[0]], [B[1], reflected_B[1]], linestyle='--', marker='o')

plt.xlim(min(A[0], B[0], reflected_A[0], reflected_B[0]) - 1, max(A[0], B[0], reflected_A[0], reflected_B[0]) + 1)
plt.ylim(min(A[1], B[1], reflected_A[1], reflected_B[1]) - 1, max(A[1], B[1], reflected_A[1], reflected_B[1]) + 1)

plt.legend()

plt.grid(True)
plt.show()
______________________________________________________________________________________________________________________
c)
import matplotlib.pyplot as plt
endpoint1 = (0, 0)
endpoint2 = (10, 10)

midpoint = ((endpoint1[0] + endpoint2[0]) / 2, (endpoint1[1] + endpoint2[1]) / 2)

plt.figure(figsize=(8, 8))
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)

plt.plot([endpoint1[0], endpoint2[0]], [endpoint1[1], endpoint2[1]], label="Line Segment", marker='o')

plt.plot(midpoint[0], midpoint[1], label="Midpoint", marker='o', color='red')

plt.xlim(min(endpoint1[0], endpoint2[0], midpoint[0]) - 1, max(endpoint1[0], endpoint2[0], midpoint[0]) + 1)
plt.ylim(min(endpoint1[1], endpoint2[1], midpoint[1]) - 1, max(endpoint1[1], endpoint2[1], midpoint[1]) + 1)

plt.legend()

plt.grid(True)
plt.show()

print(f"Midpoint coordinates: {midpoint}")
========================================================================================================================
q3
a)from pulp import*
pro=LpProblem("LPP",LpMinimize)
x=LpVariable("x",lowBound=0)
y=LpVariable("y",lowBound=0)
pro+=(3.5*x+2*y)
pro+=(x+y>=5)
pro+=(x>=4)
pro+=(y<=2)
print(pro)
st=pro.solve()
print("Status : ",LpStatus[st])
if(st==1):
    print("OPtimal value : ",pro.objective.value())
    print("X=",x.value())
    print("y=",y.value())
else:
    print("Optimal solution does not exist").
--------------------------------------------------------------------
q4
a)
import numpy as np
import matplotlib.pyplot as plt

def plot_point(point, label):
    plt.scatter(*point, label=label)

def plot_line(start, end, label):
    plt.plot([start[0], end[0]], [start[1], end[1]], label=label)

def apply_transformation(matrix, point, label):
    transformed_point = np.dot(matrix, np.array(point + [1]))[:2]
    plot_point(transformed_point, label)

P = np.array([4, -2])

plt.figure(figsize=(8, 8))
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)

plot_point(P, label="Original Point")

reflection_matrix_y = np.array([[-1, 0], [0, 1]])
apply_transformation(reflection_matrix_y, P, label="Reflection through Y-axis")

scaling_matrix_x = np.array([[3, 0], [0, 1]])
apply_transformation(scaling_matrix_x, P, label="Scaling in X-coordinate by 3")

scaling_matrix_y = np.array([[1, 0], [0, 2.5]])
apply_transformation(scaling_matrix_y, P, label="Scaling in Y-coordinate by 2.5")

reflection_matrix_line = np.array([[0, -1], [-1, 0]])
apply_transformation(reflection_matrix_line, P, label="Reflection through y=-x")

plt.xlim(-15, 15)
plt.ylim(-15, 15)

plt.legend()
plt.grid(True)
plt.show()




