
s8
_____________________________________

q1
A)
import numpy as np
import matplotlib.pyplot as plt

x_values = np.linspace(0, 5, 100)

sin_x = np.sin(x_values)
cos_x = np.cos(x_values)
exp_x = np.exp(x_values)
x_squared = x_values**2

fig, axes = plt.subplots(2, 2, figsize=(10, 8))

axes[0, 0].plot(x_values, sin_x, label='sin(x)')
axes[0, 0].set_title('sin(x)')
axes[0, 0].legend()

axes[0, 1].plot(x_values, cos_x, label='cos(x)', color='orange')
axes[0, 1].set_title('cos(x)')
axes[0, 1].legend()

axes[1, 0].plot(x_values, exp_x, label='e^x', color='green')
axes[1, 0].set_title('e^x')
axes[1, 0].legend()

axes[1, 1].plot(x_values, x_squared, label='x^2', color='red')
axes[1, 1].set_title('x^2')
axes[1, 1].legend()

plt.tight_layout()

plt.show()
____________________________________________________________
B)
import numpy as np
import matplotlib.pyplot as plt

x_values = np.linspace(0, 2 * np.pi, 100)

y_values = np.cos(x_values)

plt.figure(figsize=(8, 6))
plt.plot(x_values, y_values, label='f(x) = cos(x)')

plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('Graph of f(x) = cos(x) in [0, 2π]')

plt.legend()

plt.grid(True)
plt.show()
___________________________________________________________

q2
a)
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def rotate_point(point, angle_degrees):
    angle_radians = np.radians(angle_degrees)
    rotation_matrix = np.array([
        [np.cos(angle_radians), 0, np.sin(angle_radians)],
        [0, 1, 0],
        [-np.sin(angle_radians), 0, np.cos(angle_radians)]
    ])
    return np.dot(rotation_matrix, point)

P = np.array([1, 0, 0])

rotated_point = rotate_point(P, 90)

fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(P[0], P[1], P[2], label='Original Point', color='blue', marker='o')
ax.scatter(rotated_point[0], rotated_point[1], rotated_point[2], label='Rotated Point', color='red', marker='o')

ax.set_xlim(-1, 1)
ax.set_ylim(-1, 1)
ax.set_zlim(-1, 1)

ax.set_xlabel('X-axis')
ax.set_ylabel('Y-axis')
ax.set_zlabel('Z-axis')
ax.set_title('Rotation of Point (1, 0, 0) through XZ Plane (Y-axis) by 90 degrees')

ax.legend()

plt.show()
____________________________________________________________
c)
from sympy import*
A,B,C=Point(2,2),Point(4,2),Point(3,6)
w=Triangle(A,B,C)
print("Triangle : ") 
print("Perimeter of Triangle : ",w.perimeter)
____________________________________________________________
q3

a)
from pulp import*
pro=LpProblem("LPP",LpMaximize)
x=LpVariable("x",lowBound=0)
y=LpVariable("y",lowBound=0)
pro+=(150*x+75*y)
pro+=(4*x+6*y<=24)
pro+=(5*x+3*y<=15)
print(pro)
st=pro.solve()
print("Status : ",LpStatus[st])
if(st==1):
    print("OPtimal value : ",pro.objective.value())
    print("X=",x.value())
    print("y=",y.value())
else:
    print("Optimal solution does not exist")
_________________________________________________________________

q4

import numpy as np

P = np.array([4, -2])

reflection_y = np.array([-1, 1]) * P
print("(I) Reflection through Y-axis:", reflection_y)

scaling_x = np.array([3, 1]) * P
print("(II) Scaling in X-coordinate by factor 3:", scaling_x)

rotation_angle = np.pi
rotation_matrix = np.array([[np.cos(rotation_angle), -np.sin(rotation_angle)],
                            [np.sin(rotation_angle), np.cos(rotation_angle)]])
rotation_result = np.dot(rotation_matrix, P)
print("(III) Rotation about origin through an angle π:", rotation_result)

shearing_matrix = np.array([[1, -2],
                            [4, 1]])
shearing_result = np.dot(shearing_matrix, P)
print("(IV) Shearing in both X and Y direction by -2 and 4 units respectively:", shearing_result)


