s10
_______________________________________________
q1
a)
import numpy as np

P = np.array([1, 0, 0])

rotation_angle = np.radians(90)

rotation_matrix = np.array([[np.cos(rotation_angle), -np.sin(rotation_angle), 0],
                            [np.sin(rotation_angle), np.cos(rotation_angle), 0],
                            [0, 0, 1]])

rotated_point = np.dot(rotation_matrix, P)
print("Original point:", P)
print("Rotated point through XY plane (clockwise, 90 degrees):", rotated_point)
______________________________________________________
b)
from matplotlib.pyplot import*
x=['clothing','food','rent','petrol','misc']
y=[600,4000,2000,1500,700]
bar(x,y,width=0.5,color='green')
xlabel('Item')
ylabel('Expenditure')
title('Bar graph')
show()
___________________________________________________________

q2

B
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon

vertices = np.array([[0, 0], [2, 0], [2, 3], [1, 6]])

rotation_angle = np.radians(180)

rotation_matrix = np.array([[np.cos(rotation_angle), -np.sin(rotation_angle)],
                            [np.sin(rotation_angle), np.cos(rotation_angle)]])

rotated_vertices = np.dot(rotation_matrix, vertices.T).T

fig, ax = plt.subplots()
original_polygon = Polygon(vertices, edgecolor='blue', fill=None, linewidth=2, label='Original Polygon')
rotated_polygon = Polygon(rotated_vertices, edgecolor='red', fill=None, linewidth=2, label='Rotated Polygon')

ax.add_patch(original_polygon)
ax.add_patch(rotated_polygon)

ax.set_xlim(-7, 7)
ax.set_ylim(-7, 7)

ax.set_title('Rotation of Polygon by 180 degrees')
ax.legend()

plt.grid(True)
plt.axhline(0, color='black',linewidth=0.5)
plt.axvline(0, color='black',linewidth=0.5)
plt.show()

__________________________________________
c
from sympy import*
A,B,C=Point(2,2),Point(4,2),Point(3,6)
w=Triangle(A,B,C)
print("Triangle : ") 
print("Area of Triangle : ",w.area)
print("Perimeter of Triangle : ",w.perimeter)
_______________________________________________

q2
a)
from scipy.optimize import linprog

c = [-1, -1]

A = [[-1, 1], [1, 1]]
b = [-1, 2]

x_bounds = (0, None)
y_bounds = (0, None)

result = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds], method='highs')

optimal_x, optimal_y = result.x
maximal_Z = -result.fun  # Because linprog minimizes the objective function, so we take the negative of the result

print("Optimal values:")
print("x =", optimal_x)
print("y =", optimal_y)
print("Max Z =", maximal_Z)
_______________________________________________________

q4
a)

import numpy as np

P = np.array([-2, 4])

reflection_x = np.array([1, -1]) * P
print("(I) Reflection through X-axis:", reflection_x)

scaling_x = np.array([6, 1]) * P
print("(II) Scaling in X-coordinate by factor 6:", scaling_x)

shearing_matrix_x = np.array([[1, 4],
                              [0, 1]])
shearing_result_x = np.dot(shearing_matrix_x, P)
print("(III) Shearing in X direction by 4 units:", shearing_result_x)

rotation_angle = np.radians(30)
rotation_matrix = np.array([[np.cos(rotation_angle), -np.sin(rotation_angle)],
                            [np.sin(rotation_angle), np.cos(rotation_angle)]])
rotation_result = np.dot(rotation_matrix, P)
print("(IV) Rotate about origin through an angle 30 degrees:", rotation_result)



