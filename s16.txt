s16
_________________________________________________
q1
c)
import numpy as np
import matplotlib.pyplot as plt
def f(x):
    return x**2
x_values = np.linspace(-5, 5, 100)
y_values = f(x_values)
plt.figure(figsize=(6, 6))
plt.plot(x_values, y_values, label='$f(x) = x^2$')
plt.title('Graph of $f(x) = x^2$')
plt.xlabel('x')
plt.ylabel('$f(x)$')
plt.legend()
plt.grid(True)
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.show()
_________________________________________________________
B)
import numpy as np
import matplotlib.pyplot as plt
def f(x):
    return np.log(3 * x**2)
x_values = np.linspace(1, 10, 100)
y_values = f(x_values)
plt.plot(x_values, y_values, 'k--', label='$f(x) = \log(3x^2)$')
plt.title('Graph of $f(x) = \log(3x^2)$')
plt.xlabel('x')
plt.ylabel('$f(x)$')
plt.legend()
plt.grid(True)
plt.show()
-------------------------------------------------------------

q2
import numpy as np
A = np.array([0, 7])
B = np.array([5, 2])
def line_equation(point1, point2):
    m = (point2[1] - point1[1]) / (point2[0] - point1[0])  # Slope of the line
    c = point1[1] - m * point1[0]  # y-intercept of the line
    return m, c
slope, intercept = line_equation(A, B)
print("Equation of the line passing through points A and B:")
print(f"y = {slope}x + {intercept}")
length = np.linalg.norm(B - A)
midpoint = (A + B) / 2
print("\nLength of the line segment:", length)
print("Midpoint of the line segment:", midpoint)
----------------------------------------------------------
B)
import numpy as np
x = np.linspace(0, 15, 100)
print("Generated vector x:")
print(x)
__________________________________________________________________
q3
b
from pulp import*
pro=LpProblem("LPP",LpMinimize)
x=LpVariable("x",lowBound=0)
y=LpVariable("y",lowBound=0)
pro+=(3.5*x+2*y)
pro+=(x+y>=5)
pro+=(x>=4)
pro+=(y<=2)
print(pro)
st=pro.solve()
print("Status : ",LpStatus[st])
if(st==1):
    print("OPtimal value : ",pro.objective.value())
    print("X=",x.value())
    print("y=",y.value())
else:
    print("Optimal solution does not exist")
_______________________________________________________________

q4
B)
import numpy as np
import matplotlib.pyplot as plt
triangle_vertices = np.array([[3, 3], [3, 6], [0, 6]])
def reflect_through_y_equals_x(point):
    return np.array([point[1], point[0]])
reflected_triangle_y_equals_x = np.array([reflect_through_y_equals_x(vertex) for vertex in triangle_vertices])

reflected_triangle_y_axis = np.array([[-vertex[0], vertex[1]] for vertex in triangle_vertices])
plt.plot(triangle_vertices[:, 0], triangle_vertices[:, 1], 'b-', label='Original Triangle')
plt.plot([0, 6], [0, 6], 'r--', label='Mirror Line: y = x')
plt.axvline(x=0, color='g--', label='Mirror Line: y-axis')
plt.plot(reflected_triangle_y_equals_x[:, 0], reflected_triangle_y_equals_x[:, 1], 'r-', label='Reflection through y = x')
plt.plot(reflected_triangle_y_axis[:, 0], reflected_triangle_y_axis[:, 1], 'g-', label='Reflection through y-axis')
plt.xlim(-2, 7)
plt.ylim(-2, 7)
plt.title('Triangle and Reflections')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.show()



